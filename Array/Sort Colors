Approach 1:
TC- O(N2)

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int index;
        for(int i=0;i<nums.size()-1;i++)
        {
            index=i;
            for(int j=i+1;j<nums.size();j++)
            {
                if(nums[j]<nums[index])
                {
                    index=j;
                }               
            }
             swap(nums[index],nums[i]);
        
        }
    } 
};


Approach 2:
TC- O(N)

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n=nums.size();
        int cnt0=0,cnt1=0,cnt2=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==0)cnt0++;
            if(nums[i]==1)cnt1++;
            else
            cnt2++;
        }
        for(int i=0;i<cnt0;i++)
        {
            nums[i]=0;
        }
        for(int i=cnt0;i<cnt1+cnt0;i++)nums[i]=1;
        for(int i=cnt1+cnt0;i<n;i++)nums[i]=2;
    } 
};


Approach 3:
TC-O(n)
SC-O(1)

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low=0,mid=0,n=nums.size(),high=n-1;
        while(mid<=high)
        {
            if(nums[mid]==0)
            {
                swap(nums[low],nums[mid]);
                low++;mid++;
            }
            else if(nums[mid]==1)
            mid++;
            else
            {
                swap(nums[mid],nums[high]);high--;
            }
        }
        
    } 
};
